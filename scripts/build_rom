################################################################################
#
#          Copyright (c) 2011 - dsixda (dislam@rocketmail.com)
#
#                         (c) 2015, KSRT12
#
#                     (с) 2015, Казаков степан
#
# Android Kitchen бесплатна на 100%.  Этот файл сценария предназначен только для
# персонального использования и/или для образовательных целей. Он не может быть
# использован для денежной выгоды или любой другой цели без разрешения разработчика.
#
################################################################################


clear
echo

if [ -d WORKING_* ]
then
  echo " Рабочая папка найдена"
else
  echo " Рабочая папка не найдена!"
  exit 0
fi

#
# check build.prop
#
scripts/set_build_prop_val ro.build.date "`date`"
scripts/set_build_prop_val ro.build.date.utc "`date +%s`"

inc=`scripts/get_build_prop_val ro.build.version.incremental`
name=`scripts/get_build_prop_val ro.product.name`
brand=`scripts/get_build_prop_val ro.product.brand`
board=`scripts/get_build_prop_val ro.product.board`
build_id=`scripts/get_build_prop_val ro.build.id`
build_type=`scripts/get_build_prop_val ro.build.type`
build_tag=`scripts/get_build_prop_val ro.build.tags`
device=`scripts/get_build_prop_val ro.product.device`
release=`scripts/get_build_prop_val ro.build.version.release`
product=`scripts/get_build_prop_val ro.build.product`
user=`scripts/get_build_prop_val ro.build.user`
host=`scripts/get_build_prop_val ro.build.host`
build_fingerprint=`scripts/get_build_prop_val ro.build.fingerprint`
build_description=`scripts/get_build_prop_val ro.build.description`
sdk=`scripts/get_build_prop_val ro.build.version.sdk`

if [ "$user" != "$USER" ]
then
scripts/set_build_prop_val ro.build.user "$USER"
fi

if [ "$host" != "`hostname`" ]
then
scripts/set_build_prop_val ro.build.host "`hostname`"
fi

if [ "$brand" == "Device" ] || [ "$brand" == "" ]
then
echo "ro.product.brand=$brand"
echo "Укажите правильное название производителя"
read newbrand
if [ "$newbrand" != "Device" ] && [ "$newbrand" != "" ]
then
scripts/set_build_prop_val ro.product.manufacturer "$newbrand"
scripts/set_build_prop_val ro.product.brand "$newbrand"
brand=$newbrand
fi
fi

if [ "$build_fingerprint" != "$brand/$name/$device:$release/$build_id/$inc:$build_type/$build_tag" ]
then
#echo "$brand/$name/$device:$release/$build_id/$inc:$build_type/$build_tag"
fingerprint="$brand\\/$name\\/$device:$release\\/$build_id\\/$inc:$build_type\\/$build_tag"
scripts/set_build_prop_val ro.build.fingerprint $fingerprint
fi

if [ "$build_description" != "$product-$build_type $build_id $inc $build_tag" ]
then
#echo "$product-$build_type $build_id $inc $build_tag"
new_description="$product-$build_type $build_id $inc $build_tag"
#echo $new_description
scripts/set_build_prop_val ro.build.description "$new_description"
fi

cd WORKING_*

if [ -e META-INF/com/google/android/update-script ] && [ -e META-INF/com/google/android/updater-script ]
then

  echo
  echo " Ошибка:  И update-script, и updater-script обнаружены в рабочей папке." 
  echo "          Оставьте только один из них, прежде чем собирать ROM!" 
  echo

  cd ..
  exit 0
fi

echo
echo " Очистка всех оставшихся файлов ..."
echo
if [ -e system/build.prop~ ]
then
rm -f system/build.prop~
fi
rm -f *.zip
rm -f testkey.*
rm -f signapk.jar
rm -f signed*.zip
rm -f *smali.jar

#
# Clean up *.DS_Store hidden files
#
find . -name '*.DS_Store' -type f -delete

#
# Clean up stackdump files
#
find . -name sh.exe.stackdump -type f -delete


#
# Clean up temp files left behind by interrupted Amend/Edify conversion scripts
#
if [ -d META-INF/com/google/android ]
then
  find META-INF/com/google/android/ -name 'sed*' -type f -delete
fi


#
# Clean up strange temp file issue in root of working folder
#

file_list=`find . -maxdepth 1 -type f`

for filename in $file_list
do

  filename=`echo $filename | sed 's/\.\///g'`
  header_bytes=`od -A n -H -j 0 -N 4 $filename | sed 's/ //g'`

  if [ "$header_bytes" == "04034b50" ]
  then
    echo -n "Найден файл в корневой папке: $filename. Удалить (y/n)? (по умолчанию: y): "
    read delete_file

    if [ "$delete_file" != "n" ]
    then
      echo "Удаление $filename"
      rm -f $filename
    else
      echo "Сохранение $filename"
    fi
  fi
done


cd ..
scripts/prompt_nand_type
cd WORKING_*


echo
echo `pwd`
echo
ls -lrt
cd ..
echo


scripts/fix_pre_build

# Check for 'dsixda Null'
cmd_line=`scripts/get_cmdline`

extreme=no
express=no
interactive=no

echo
echo "=========================================================================="
echo
echo "Выбирите номер опции сборки:"
echo
echo "  1 = Интерактивный режим - рекомендован для большинства пользователей"
echo "      (Guide me through the build)"
echo
echo "  2 = Lazy Mode - доверять кухне, чтобы сделать все, не спрашивая"
echo "      (Zipalign, Edify, подпись ROM'а, auto-name ZIP)"
echo
echo "  3 = Express Mode - для продвинутых пользователей"
echo "      (Zipalign, Edify, don't sign ROM, auto-name ZIP)"
echo 
echo "  4 = Extreme Mode - для продвинутых пользователей"
echo "      (Не zipalign, не конвертировать script,не подписать ROM, auto-name ZIP)"
echo 
echo "  5 = Отмена - Не собирать сейчас"
echo
echo "=========================================================================="
echo
echo -n "Введите номер (по умолчанию: 1): "

read build_mode

# Default is 1, so remember to account for Enter key
if [ "$build_mode" == "5" ]
then
  echo "Отменено"
  exit 0
elif [ "$build_mode" == "4" ]
then
  extreme=yes  
elif [ "$build_mode" == "3" ]
then
  express=yes 
elif [ "$build_mode" == "2" ]
then
  lazy=yes
  express=yes
else
  interactive=yes
fi


if [ "$extreme" == "no" ]
then
  scripts/do_zipalign for_build $express
fi

if [ "$?" == "1" ]
then
  echo "Отмена сборки..."
  exit 0
fi

cd WORKING_*


#
# Convert update-script (Amend) to updater-script (Edify) for the ZIP file only
#

if [ "$extreme" == "no" ] && [ -e META-INF/com/google/android/update-script ]
then
 
  cd ..
  scripts/update_script_should_convert_back
  auto_convert="$?"
  cd WORKING_*
  
  if [ "$auto_convert" == "1" ] || [ "$express" == "yes" ]
  then 
    convert_it=y
    want_file=updater-script

  else
    echo
    echo "--------------------------------------------------------------------------"
    echo 
    echo " update-script обнаружен в ROM'е"
    echo
    echo " Для обеспечения совместимости с более новыми кастомными recovery,"
    echo " у вас есть возможность использовния updater-script (Edify) вместо"
    echo " update-script (Amend) в вашем ROM's ZIP файле."
    echo 
    echo " Ваша рабочая папка останется неизменной, сохранив оригинальный "
    echo " update-script."
    echo 
    echo -n " Использовать updater-script в ZIP-файле ROM'а (y/n)? (по умолчанию: y): "
    read convert_it
  fi


  if [ "$convert_it" != "n" ]
  then

    # Remove installbusybox (it's compatible with updater-script, but
    # Edify syntax also supports run_program with multiple args)
    if [ -e installbusybox ] 
    then
      cd ..
      scripts/add_busybox_to_update_script
      cd WORKING_*
    fi

    cd ..
    scripts/convert_update_script for_zip $express

    # updater-script has been produced
    if [ "$?" != "1" ]
    then

      cd WORKING_*

      if [ "$express" == "yes" ]
      then
        proceed_change=y
      else
        echo "Продолжить с изменениями (y/n)?"
        echo 
        echo "  y = Продолжить; updater-script и update-binary будут использоваться ZIP"
        echo "      файле; update-script останется в рабочей папке."
        echo "  n = Отмена; updater-script и update-binary будут удалены и не"
        echo "      будут использоваться."
        echo
         
        echo -n "? (по умолчанию: y): "
        read proceed_change 
      fi

      echo

      if [ "$proceed_change" != "n" ]
      then

        if [ -e META-INF/com/google/android/updater-script ]
        then
          ../scripts/convert_to_unix META-INF/com/google/android/updater-script 
          want_file=updater-script
        else
          echo "updater-script не найден, сохранение update-script"
          want_file=update-script
        fi

      else
        echo
        echo "Отмена - будет использован update-script в ZIP-файле"
        want_file=update-script
        rm -fv META-INF/com/google/android/updater-script
        rm -fv META-INF/com/google/android/update-binary
        echo
      fi


      if [ "$auto_convert" == "1" ] && [ "$proceed_change" == "n" ]
      then
        echo "Вы не сможете прошить ROM без updater-script."
        echo
        cd ..
        exit 0
      fi

    else
      echo "Сохранение update-script"
      cd WORKING_*
      want_file=update-script
    fi

  else
    echo
    echo
    echo "Сохранение update-script"
    want_file=update-script
  fi

  echo

else

  echo

  if [ -e META-INF/com/google/android/update-script ]
  then
    echo "update-script (Amend) найден"
    want_file=update-script
  fi
  
  if [ -e META-INF/com/google/android/updater-script ]
  then
    echo "updater-script (Edify) найден"
    want_file=updater-script
  fi

  echo
fi






if [ "$want_file" == "updater-script" ]
then
  script_not_want=*update-script*
  binary_not_want=""
else

  # Remove any run_program references to busybox with multiple args
  # and replace with the installbusybox script. This is compatible
  # with update-script.
  if [ -e system/xbin/busybox ]
  then
    cd ..
    scripts/add_busybox_to_update_script amend
    cd WORKING_*
  fi

  script_not_want=*updater-script*
  binary_not_want=*update-binary*
fi

if [ "$cmd_line" == "dsixda Null" ]
then
  boot_not_want=boot.img
else
  boot_not_want=""
fi


#
# Create update.zip
#
echo "Создание update.zip ..."

zip -r -y -q update * -x *.cvs* *.git* *.svn* \
    *updater-script.orig* *update-binary.orig* *update-script.orig* \
    $script_not_want $binary_not_want $boot_not_want


echo

# Remove updater-script from working folder if update-script already exists
cd META-INF/com/google/android
if [ -e update-script ]
then
  rm -f updater-script
  rm -f update-binary
fi

cd ../../../..


if [ -e update.zip ]
then
  echo "update.zip создан"
  echo
else
  echo "Ошибка: update.zip не создан!"
  cd ..
  exit 0
fi



#
# Sign update.zip if necessary
#

date_str=`date '+%m%d%y_%H%M%S'`

cd ..
device=`scripts/get_device_name | sed 's/ /_/g'`
cd WORKING_*


sign_update=no
sign_str=unsigned

if [ "$lazy" == "yes" ]
then
  do_sign=y
else
  do_sign=n
fi

if [ "$interactive" == "yes" ]
then
  echo
  echo "Рекомендуется подписать ROM."
  echo -n "Подписать (y/n)? (по умолчанию: y): "
  read do_sign
fi

if [ "$do_sign" != "n" ]
then
  sign_update=yes
  sign_str=signed
fi

final_file=$brand\_$device\_$release\_by_$user\_$sign_str.zip


if [ "$sign_update" == "no" ]
then
  mv update.zip $final_file
  res=$?

else
  echo
  echo "Подпись update.zip ..."

  cp ../tools/signapk_files/testkey.* .
  cp ../tools/signapk_files/signapk.jar .

  java -jar signapk.jar testkey.x509.pem testkey.pk8 update.zip $final_file
  res=$?

  rm -f testkey.*
  rm -f signapk.jar
  rm -f update.zip
fi


if [ -e $final_file ] && [ "$res" == "0" ]
then

  #
  # Rename zip
  #
  if [ "$interactive" == "yes" ]
  then
    cd ..
    final_file2=`scripts/set_update_name $final_file`
    cd WORKING_*
    if [ "$final_file2" != "$final_file" ]
    then
      mv -fv $final_file $final_file2
      final_file=$final_file2
    fi
  fi

  echo

  #
  # Make output folder
  #
  if [ -d ../OUTPUT_ZIP ]
  then
    echo "Папка OUTPUT_ZIP найдена" 
  else
    echo "Создание папки OUTPUT_ZIP ..."
    mkdir ../OUTPUT_ZIP
  fi

  mv $final_file ../OUTPUT_ZIP/
  
  #
  # Remove old WORKING directory
  #
  if [ -d ../WORKING_* ]
  then
   echo "Удалить старую рабочую папку? (Y/n):"
   read rmold
   if [ "$rmold" != "n" ] || [ "$rmold" != "N" ]
   then
    rm -f -R ../WORKING_*
   else
    echo "Старая рабочая папка сохранена"
   fi
  fi
  
  echo
  echo
  echo "=========================================================================="
  echo
  echo " Ваш ROM здесь:"
  echo
  echo "----> OUTPUT_ZIP/$final_file" 
  echo
  echo " Скопируйте этот ZIP-файл в ваш телефон и прошейте через кастомое recovery."
  echo
  echo "=========================================================================="
  echo
  echo " ПРИМЕЧАНИЕ 1: Не забудьте сделать сброс к заводским настройкам или wipe"
  echo "               data/cache, если это необходимо!"
  echo
  echo " ПРИМЕЧАНИЕ 2: Всегда обращайтесь к Android Kitchen FAQ @ xda-developers.com для"
  echo "               решения общих вопросов, таких как:"
  echo
  echo "  - Ошибки во время прошивки (например Status 0)"
  echo "  - ROM не стартует после прошивки ZIP-файла"

  if [ "$sign_update" == "no" ]
  then
    echo
    echo " ПРИМЕЧАНИЕ 3: Вам нужно будет отключить проверке подписи в меню "
    echo " recovery, чтобы прошить ROM! Если вы хотите подписать этот ROM позже,"
    echo " пожалуйста, используйте опцию Sign ZIP в Дополнительном меню кухни."
  fi

  echo
  echo "Удачи!"

else 

  echo
  echo "Was not able to create $final_file!"
  echo

  if [ "$sign_update" == "yes" ]
  then
    if [ `uname | grep Linux` ] 
    then
      echo "Ensure you have a recent version of the Sun Java JDK"
    
    elif [ `uname | grep CYGWIN` ]
    then
      echo "Ensure you have the Sun Java JDK installed on your PC." 
      echo
      echo "If you already have the JDK, then perhaps the path to java.exe was"
      echo "not defined properly:"
      echo 
      echo "e.g.  In $HOME/.bash_profile, add to the end:"
      echo "      PATH=/cygdrive/c/Program\ Files/Java/jdk1.6.0_18/bin:\${PATH}" 
      echo 
      echo "      The above is an example. Your path may be different."

    elif [ `sw_vers | grep -o Mac` ]
    then
      echo "You may need to install SoyLatte for Mac OS X (to replace the standard "
      echo "Java JDK)"
    fi
  fi
fi

cd ..

# System beep
echo 

